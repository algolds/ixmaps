// quick-fix.js - Run this script to initialize your IxMaps environment
// Usage: node quick-fix.js

const fs = require('fs');
const path = require('path');

console.log('IxMaps Quick Fix Tool');
console.log('=====================');

// Configuration
const config = {
  dataDir: path.join(__dirname, 'data'),
  publicDir: path.join(__dirname, 'public'),
  mapDir: path.join(__dirname, 'data', 'maps', 'v', 'alpha', 'ixmaps', 'public'),
  mapFile: 'map.svg',
  dataFiles: {
    labels: path.join(__dirname, 'data', 'labels.json'),
    settings: path.join(__dirname, 'data', 'settings.json'),
    layers: path.join(__dirname, 'data', 'layers.json')
  },
  defaults: {
    labels: [],
    settings: {
      defaultZoom: 0,
      svgWidth: 1920,
      svgHeight: 1080,
      bgColor: '#e0e0e0'
    },
    layers: [
      { 
        id: 'continents', 
        label: 'Continents', 
        labelTypes: ['continent'], 
        defaultVisible: true 
      },
      { 
        id: 'countries', 
        label: 'Countries', 
        labelTypes: ['country'], 
        defaultVisible: true 
      },
      { 
        id: 'capitals', 
        label: 'Capitals', 
        labelTypes: ['capital'], 
        defaultVisible: true 
      },
      { 
        id: 'waters', 
        label: 'Water Bodies', 
        labelTypes: ['water'], 
        defaultVisible: true 
      }
    ]
  }
};

// Create directories
function createDirectories() {
  console.log('\nCreating directories...');
  
  const dirs = [config.dataDir, config.publicDir, config.mapDir];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      try {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`✅ Created: ${dir}`);
      } catch (error) {
        console.error(`❌ Error creating ${dir}: ${error.message}`);
      }
    } else {
      console.log(`✓ Exists: ${dir}`);
    }
  });
}

// Create data files
function createDataFiles() {
  console.log('\nChecking data files...');
  
  Object.entries(config.dataFiles).forEach(([key, filePath]) => {
    if (!fs.existsSync(filePath)) {
      try {
        fs.writeFileSync(
          filePath, 
          JSON.stringify(config.defaults[key], null, 2), 
          'utf8'
        );
        console.log(`✅ Created: ${filePath}`);
      } catch (error) {
        console.error(`❌ Error creating ${filePath}: ${error.message}`);
      }
    } else {
      console.log(`✓ Exists: ${filePath}`);
      
      // Validate JSON format
      try {
        const content = fs.readFileSync(filePath, 'utf8');
        JSON.parse(content);
      } catch (error) {
        console.error(`⚠️ Warning: ${filePath} contains invalid JSON`);
        
        // Create backup and fix
        try {
          const backupPath = `${filePath}.bak`;
          fs.copyFileSync(filePath, backupPath);
          console.log(`  Created backup: ${backupPath}`);
          
          fs.writeFileSync(
            filePath, 
            JSON.stringify(config.defaults[key], null, 2), 
            'utf8'
          );
          console.log(`  Fixed file with default content`);
        } catch (backupError) {
          console.error(`  Error creating backup: ${backupError.message}`);
        }
      }
    }
  });
}

// Check map file
function checkMapFile() {
  console.log('\nChecking map file...');
  
  const mapPath = path.join(config.mapDir, config.mapFile);
  
  if (!fs.existsSync(mapPath)) {
    console.log(`⚠️ Warning: Map file not found at ${mapPath}`);
    console.log('  You need to manually copy your SVG map to this location');
  } else {
    const stats = fs.statSync(mapPath);
    console.log(`✓ Map file exists (${(stats.size / 1024).toFixed(2)} KB)`);
    
    // Check if it's a valid SVG
    try {
      const content = fs.readFileSync(mapPath, 'utf8').toString();
      if (content.includes('<svg') || content.includes('<?xml')) {
        console.log('✓ File appears to be a valid SVG');
      } else {
        console.log('⚠️ Warning: File may not be a valid SVG');
      }
    } catch (error) {
      console.error(`❌ Error reading map file: ${error.message}`);
    }
  }
}

// Check HTML files
function checkHtmlFiles() {
  console.log('\nChecking HTML files...');
  
  const indexPath = path.join(config.publicDir, 'index.html');
  const adminPath = path.join(config.publicDir, 'admin.html');
  
  if (!fs.existsSync(indexPath)) {
    console.log(`⚠️ Warning: Main map HTML not found at ${indexPath}`);
    console.log('  You need to manually copy your index.html to this location');
  } else {
    console.log(`✓ Main map HTML exists`);
  }
  
  if (!fs.existsSync(adminPath)) {
    console.log(`⚠️ Warning: Admin HTML not found at ${adminPath}`);
    console.log('  You need to manually copy your admin.html to this location');
  } else {
    console.log(`✓ Admin HTML exists`);
  }
}

// Run all checks
async function runFixes() {
  console.log('Starting IxMaps environment setup...\n');
  
  createDirectories();
  createDataFiles();
  checkMapFile();
  checkHtmlFiles();
  
  console.log('\nSetup complete!');
  console.log('\nNext steps:');
  console.log('1. Make sure your server.js includes all the required API endpoints');
  console.log('2. Restart your server with: node server.js');
  console.log('3. Access your admin panel at: http://localhost:3000/admin');
  console.log('4. Access your map at: http://localhost:3000/');
}

// Execute the script
runFixes().catch(error => {
  console.error('An error occurred during setup:', error);
});